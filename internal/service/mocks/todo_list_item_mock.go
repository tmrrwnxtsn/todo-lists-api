// Code generated by MockGen. DO NOT EDIT.
// Source: todo_list_item.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/tmrrwnxtsn/todo-lists-api/internal/model"
)

// MockTodoListItem is a mock of TodoListItem interface.
type MockTodoListItem struct {
	ctrl     *gomock.Controller
	recorder *MockTodoListItemMockRecorder
}

// MockTodoListItemMockRecorder is the mock recorder for MockTodoListItem.
type MockTodoListItemMockRecorder struct {
	mock *MockTodoListItem
}

// NewMockTodoListItem creates a new mock instance.
func NewMockTodoListItem(ctrl *gomock.Controller) *MockTodoListItem {
	mock := &MockTodoListItem{ctrl: ctrl}
	mock.recorder = &MockTodoListItemMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTodoListItem) EXPECT() *MockTodoListItemMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockTodoListItem) Create(userId, listId uint64, item model.TodoListItem) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", userId, listId, item)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockTodoListItemMockRecorder) Create(userId, listId, item interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTodoListItem)(nil).Create), userId, listId, item)
}

// Delete mocks base method.
func (m *MockTodoListItem) Delete(userId, itemId uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", userId, itemId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockTodoListItemMockRecorder) Delete(userId, itemId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTodoListItem)(nil).Delete), userId, itemId)
}

// GetAll mocks base method.
func (m *MockTodoListItem) GetAll(userId, listId uint64) ([]model.TodoListItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", userId, listId)
	ret0, _ := ret[0].([]model.TodoListItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockTodoListItemMockRecorder) GetAll(userId, listId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockTodoListItem)(nil).GetAll), userId, listId)
}

// GetById mocks base method.
func (m *MockTodoListItem) GetById(userId, itemId uint64) (model.TodoListItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", userId, itemId)
	ret0, _ := ret[0].(model.TodoListItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockTodoListItemMockRecorder) GetById(userId, itemId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockTodoListItem)(nil).GetById), userId, itemId)
}

// Update mocks base method.
func (m *MockTodoListItem) Update(userId, itemId uint64, data model.UpdateTodoListItemData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", userId, itemId, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockTodoListItemMockRecorder) Update(userId, itemId, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTodoListItem)(nil).Update), userId, itemId, data)
}
